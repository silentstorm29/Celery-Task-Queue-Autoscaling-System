name: CI (build -> KinD deploy -> autoscaling test)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  NS: celery-autoscale

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
      - name: Build images (local tags)
        run: |
          docker build -t celery-autoscale-app:ci -f app/Dockerfile .
          docker build -t celery-queue-exporter:ci -f exporter/Dockerfile .

      - uses: helm/kind-action@v1
        with: { version: v0.24.0, cluster_name: ci-kind }

      - name: Load images into KinD
        run: |
          kind load docker-image celery-autoscale-app:ci --name ci-kind
        # if exporter is used by HPA path, also:
          kind load docker-image celery-queue-exporter:ci --name ci-kind

      - uses: azure/setup-kubectl@v4
        with: { version: 'v1.30.0' }
      - uses: imranismail/setup-kustomize@v2
        with: { kustomize-version: '5.4.1' }

      - name: Enable metrics-server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.7.2/components.yaml
          kubectl -n kube-system patch deploy metrics-server --type='json' \
            -p='[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--kubelet-insecure-tls"}]'
          kubectl -n kube-system rollout status deploy/metrics-server --timeout=180s

      - name: Prepare kustomize (use local :ci tags)
        working-directory: k8s
        run: |
          kustomize edit set namespace ${NS} || true
          kustomize edit set image celery-autoscale-app=celery-autoscale-app:ci || true
          kustomize edit set image celery-queue-exporter=celery-queue-exporter:ci || true

      - name: Deploy stack
        run: |
          kubectl apply -f k8s/00-namespace.yaml
          kustomize build k8s | kubectl apply -f -
          kubectl -n ${NS} rollout status deploy/redis --timeout=180s
          kubectl -n ${NS} rollout status deploy/celery-worker --timeout=240s
          kubectl -n ${NS} rollout status deploy/queue-exporter --timeout=180s
          kubectl -n ${NS} rollout status deploy/prometheus --timeout=240s
          kubectl -n ${NS} rollout status deploy/prometheus-adapter --timeout=240s
          kubectl -n ${NS} get pods,deploy,svc,hpa -o wide

      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install generator deps
        run: pip install celery redis

      - name: Port-forward Redis and send burst
        env:
          BROKER_URL: redis://127.0.0.1:6379/0
          BACKEND_URL: redis://127.0.0.1:6379/1
        run: |
          nohup kubectl -n ${NS} port-forward svc/redis 6379:6379 >/tmp/pf.log 2>&1 &
          sleep 5
          python scripts/generate_tasks.py burst --n 400

      - name: Assert HPA scales > 1
        run: |
          set -e
          for i in {1..30}; do
            DESIRED=$(kubectl -n ${NS} get hpa celery-worker-hpa -o jsonpath='{.status.desiredReplicas}')
            echo "desiredReplicas=$DESIRED"
            if [ -n "$DESIRED" ] && [ "$DESIRED" -gt 1 ]; then
              echo "PASS: HPA scaled"
              exit 0
            fi
            sleep 10
          done
          echo "FAIL: HPA did not scale in time" >&2
          kubectl -n ${NS} describe hpa celery-worker-hpa
          kubectl -n ${NS} logs deploy/prometheus-adapter || true
          kubectl -n ${NS} logs deploy/queue-exporter || true
          exit 1

      - name: Debug on failure (pods, events, logs)
        if: failure()
        run: |
          kubectl -n ${NS} get pods -o wide
          kubectl -n ${NS} describe deploy celery-worker || true
          for p in $(kubectl -n ${NS} get pods -l app=celery-worker -o name); do
            echo "== LOGS for $p =="
            kubectl -n ${NS} logs $p --all-containers=true --tail=200 || true
          done
          kubectl -n ${NS} get events --sort-by=.lastTimestamp | tail -n 200 || true

