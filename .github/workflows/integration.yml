name: Integration (KinD autoscaling)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_APP: ${{ github.repository }}/celery-autoscale-app
  IMAGE_EXPORTER: ${{ github.repository }}/celery-queue-exporter
  NS: celery-autoscale

jobs:
  build-and-push:
    # (your existing job from build.ymlâ€”move it here or keep as composite)
  integration:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: read }
    steps:
      # (use ghcr.io/silentstorm29/...:${GITHUB_SHA::12} in kustomize set image)
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'
      - name: Install kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '5.4.1'
      - name: Spin up KinD
        uses: helm/kind-action@v1
        with:
          version: v0.24.0
          cluster_name: ci-kind

      - name: Enable metrics-server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.7.2/components.yaml
          kubectl -n kube-system patch deploy metrics-server --type='json' \
            -p='[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--kubelet-insecure-tls"}]'
          kubectl -n kube-system rollout status deploy/metrics-server --timeout=180s

      - name: Use short-SHA tags from last build
        id: tags
        run: |
          echo "app=${{ env.REGISTRY }}/${{ env.IMAGE_APP }}:${GITHUB_SHA::12}" >> $GITHUB_OUTPUT
          echo "exporter=${{ env.REGISTRY }}/${{ env.IMAGE_EXPORTER }}:${GITHUB_SHA::12}" >> $GITHUB_OUTPUT

      - name: Prepare kustomize overrides
        working-directory: k8s
        run: |
          kustomize edit set namespace ${NS} || true
          kustomize edit set image celery-autoscale-app=${{ steps.tags.outputs.app }} || true
          kustomize edit set image celery-queue-exporter=${{ steps.tags.outputs.exporter }} || true

      - name: Deploy stack
        run: |
          kubectl apply -f k8s/00-namespace.yaml
          kustomize build k8s | kubectl apply -f -
          kubectl -n ${NS} rollout status deploy/redis --timeout=180s
          kubectl -n ${NS} rollout status deploy/celery-worker --timeout=240s
          kubectl -n ${NS} rollout status deploy/queue-exporter --timeout=180s
          kubectl -n ${NS} rollout status deploy/prometheus --timeout=240s
          kubectl -n ${NS} rollout status deploy/prometheus-adapter --timeout=240s
          kubectl -n ${NS} get pods,deploy,svc,hpa -o wide

      - name: Install Python for load
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: pip install celery redis

      - name: Port-forward Redis and send burst
        env:
          BROKER_URL: redis://127.0.0.1:6379/0
          BACKEND_URL: redis://127.0.0.1:6379/1
        run: |
          nohup kubectl -n ${NS} port-forward svc/redis 6379:6379 >/tmp/pf.log 2>&1 &
          sleep 5
          python scripts/generate_tasks.py burst --n 400

      - name: Assert HPA scales > 1
        run: |
          set -e
          for i in {1..30}; do
            DESIRED=$(kubectl -n ${NS} get hpa celery-worker-hpa -o jsonpath='{.status.desiredReplicas}')
            echo "desiredReplicas=$DESIRED"
            if [ -n "$DESIRED" ] && [ "$DESIRED" -gt 1 ]; then
              echo "PASS: HPA scaled"
              exit 0
            fi
            sleep 10
          done
          echo "FAIL: HPA did not scale in time" >&2
          kubectl -n ${NS} describe hpa celery-worker-hpa
          kubectl -n ${NS} logs deploy/prometheus-adapter || true
          kubectl -n ${NS} logs deploy/queue-exporter || true
          exit 1
